#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <conio.h>
#include <ctype.h>
#include "utilemb.h"
#include "php_md5.h"


EXEC SQL INCLUDE SQLCA;


int execi(char s[1000]);

EXEC SQL BEGIN DECLARE SECTION;
        struct VARCHAR {
           short len;
           char  stmt[1000];
        } sqlstmt; /* Varchar for statement text    */
EXEC SQL END DECLARE SECTION;

int main(int argc, char *argv[]) {

   EXEC SQL BEGIN DECLARE SECTION;
           char user[32];           // var for actual user
           char pwd[32];            // host var for hashed pwd in pwdlogin
           char enc_pwd[32];        // pwd entered
           char enc_pwd2[32];       // pwd entered again
           char enc_pwd_final[33];  // md5 hashed pwd

           short admin;				// host var, if user is admin -> allow register new users
           short there;				// host var to check if tables are there
		   char huser[32];
		   char username[32];

           char uid[9];             // connection vars
      	   char passwd[19];
      	   char db[19];
   EXEC SQL END DECLARE SECTION;

   unsigned int numsel = 999;       // menue var
   unsigned int maxsel = 0;
   struct sqlca sqlca;              // sqlca structure
   int ch, i = 0;                   // vars for enc_pwd input
   char *temp_pwd;                  // temp var for php_md5 func
   char tbspace[256];
   char hst[1000];
   char atext[4];


   switch( argc )
   {
	   case 2:
	   case 4:
	   		break;
	   default:
            printf ("\nUSAGE: %s database [userid passwd]\n\n", argv[0]);
            return 1;
            break;
   }


   // init connection vars

   db[0] = '\0';
   uid[0] = '\0';
   passwd[0] = '\0';

   user[0] = '\0';
   enc_pwd[0] = '\0';
   enc_pwd2[0] = '\0';
   enc_pwd_final[0] = '\0';

   switch( argc )
   {
       case 2:
          strcpy (db, argv[1]);
          EXEC SQL CONNECT TO :db;
          EMB_SQL_CHECK("CONNECT TO DB");
          break;
       case 4:
          strcpy (db, argv[1]);
          strcpy (uid, argv[2]);
          strcpy (passwd, argv[3]);
          EXEC SQL CONNECT TO :db USER :uid USING :passwd;
          EMB_SQL_CHECK("CONNECT TO DB");
          break;
       default:
          printf ("\nUSAGE: %s database [userid passwd]\n\n", argv[0]);
          return 1;
          break;
   }


   // check if tables are there

   EXEC SQL SELECT count(tabname) INTO :there
       FROM syscat.tables
       WHERE tabschema = 'PWDSAFE' AND tabname = 'PWDLIST' OR tabname = 'PWDLOGIN';

   if( there < 2 )
   {
       printf( "\nTables not in database\n\n" );
   	   printf( "Tablespace (leave blank for default tablespace: " );
   	   tbspace[0] = '\0';
	   fflush(stdin);
	   gets( tbspace );

   	   printf( "\n\nCreating tables..." );

   	   // create the tables

   	   if( strlen( tbspace ) == 0 )
   	   {

   	   //default tbs

   	   execi(

       "CREATE TABLE \"PWDSAFE\".\"PWDLIST\"  (					\
		  \"ACCOUNT\" VARCHAR(32) NOT NULL , 		\
		  \"USERID\" VARCHAR(32) NOT NULL , 		\
		  \"PASSWORD\" VARCHAR(32) FOR BIT DATA , 	\
		  \"DESCRIPTION\" VARCHAR(64) ,				\
		  \"USR\" VARCHAR(32) NOT NULL )"

	   );

       execi(

	   "CREATE TABLE \"PWDSAFE\".\"PWDLOGIN\"  (					\
 		  \"USR\" VARCHAR(32) NOT NULL , 				\
 		  \"PWD\" VARCHAR(32) NOT NULL ,				\
 		  \"ADMIN\" INTEGER NOT NULL WITH DEFAULT 0 )"
 	   );

       } else {

	   hst[0] = '\0';

	   sprintf( hst, "CREATE TABLE \"PWDSAFE\".\"PWDLIST\"  (					\
		  \"ACCOUNT\" VARCHAR(32) NOT NULL , 		\
		  \"USERID\" VARCHAR(32) NOT NULL , 		\
		  \"PASSWORD\" VARCHAR(32) FOR BIT DATA , 	\
		  \"DESCRIPTION\" VARCHAR(64) ,				\
		  \"USR\" VARCHAR(32) NOT NULL ) IN \"%s\"", tbspace );

       execi( hst );

       hst[0] = '\0';

       sprintf( hst, "CREATE TABLE \"PWDSAFE\".\"PWDLOGIN\"  (					\
 		  \"USR\" VARCHAR(32) NOT NULL , 				\
 		  \"PWD\" VARCHAR(32) NOT NULL ,				\
 		  \"ADMIN\" INTEGER NOT NULL WITH DEFAULT 0 ) IN \"%s\"" , tbspace );

       execi( hst );

       }

       // primary keys

       execi(

       "ALTER TABLE \"PWDSAFE\".\"PWDLIST\" 						\
	       ADD CONSTRAINT \"PK_PWDLIST\" PRIMARY KEY	\
	           (\"ACCOUNT\", \"USR\")"

       );

       execi(

       "ALTER TABLE \"PWDSAFE\".\"PWDLOGIN\" 						\
	       ADD CONSTRAINT \"PK_PWDLOGIN\" PRIMARY KEY	\
		       (\"USR\")"

       );

   }
}



int execi (char s[1000]) {

   strcpy(sqlstmt.stmt, s);

   sqlstmt.len = strlen(sqlstmt.stmt);

   EXEC SQL
      EXECUTE IMMEDIATE :sqlstmt;

   //EMB_SQL_CHECK("SQL Check");

   if( sqlca.sqlcode == -204 )
   {
      printf( "\n\nThe entered tablespace does not exist.\n" );
      EXEC SQL ROLLBACK;
      EXEC SQL CONNECT RESET;
      EMB_SQL_CHECK("CONNECT RESET");
      exit(99);
   }

   if( sqlca.sqlcode == -601 )
   {
      //printf( "\n\nTable already exists.\n" );
      EXEC SQL ROLLBACK;
      return -601;
   }
   if( sqlca.sqlcode == -6244 )
   {
      //printf( "\n\nIndex already exists.\n" );
      EXEC SQL ROLLBACK;
      return -624;
   }


   EXEC SQL COMMIT;

   EMB_SQL_CHECK("COMMIT");

   //printf( "\n%s\n", s );

   return 0;
}
